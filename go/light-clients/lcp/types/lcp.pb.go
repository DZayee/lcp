// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/lcp/v1/lcp.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v7/modules/core/02-client/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateClientHeader struct {
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Signer     []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature  []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *UpdateClientHeader) Reset()         { *m = UpdateClientHeader{} }
func (m *UpdateClientHeader) String() string { return proto.CompactTextString(m) }
func (*UpdateClientHeader) ProtoMessage()    {}
func (*UpdateClientHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{0}
}
func (m *UpdateClientHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClientHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClientHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClientHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClientHeader.Merge(m, src)
}
func (m *UpdateClientHeader) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClientHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClientHeader.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClientHeader proto.InternalMessageInfo

type RegisterEnclaveKeyHeader struct {
	Report      string `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SigningCert []byte `protobuf:"bytes,3,opt,name=signing_cert,json=signingCert,proto3" json:"signing_cert,omitempty"`
}

func (m *RegisterEnclaveKeyHeader) Reset()         { *m = RegisterEnclaveKeyHeader{} }
func (m *RegisterEnclaveKeyHeader) String() string { return proto.CompactTextString(m) }
func (*RegisterEnclaveKeyHeader) ProtoMessage()    {}
func (*RegisterEnclaveKeyHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{1}
}
func (m *RegisterEnclaveKeyHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterEnclaveKeyHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterEnclaveKeyHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterEnclaveKeyHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterEnclaveKeyHeader.Merge(m, src)
}
func (m *RegisterEnclaveKeyHeader) XXX_Size() int {
	return m.Size()
}
func (m *RegisterEnclaveKeyHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterEnclaveKeyHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterEnclaveKeyHeader proto.InternalMessageInfo

type ClientState struct {
	LatestHeight  types.Height `protobuf:"bytes,1,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height"`
	Mrenclave     []byte       `protobuf:"bytes,2,opt,name=mrenclave,proto3" json:"mrenclave,omitempty"`
	KeyExpiration uint64       `protobuf:"varint,3,opt,name=key_expiration,json=keyExpiration,proto3" json:"key_expiration,omitempty"`
	Keys          [][]byte     `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty"`
	// unix timestamp in seconds
	AttestationTimes []uint64 `protobuf:"varint,5,rep,packed,name=attestation_times,json=attestationTimes,proto3" json:"attestation_times,omitempty"`
	// e.g. SW_HARDENING_NEEDED, CONFIGURATION_AND_SW_HARDENING_NEEDED (except "OK")
	AllowedQuoteStatuses []string `protobuf:"bytes,6,rep,name=allowed_quote_statuses,json=allowedQuoteStatuses,proto3" json:"allowed_quote_statuses,omitempty"`
	// e.g. INTEL-SA-XXXXX
	AllowedAdvisoryIds []string `protobuf:"bytes,7,rep,name=allowed_advisory_ids,json=allowedAdvisoryIds,proto3" json:"allowed_advisory_ids,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{2}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type ConsensusState struct {
	StateId []byte `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	// unix timestamp in seconds
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_69f4c398e914fe8d, []int{3}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateClientHeader)(nil), "ibc.lightclients.lcp.v1.UpdateClientHeader")
	proto.RegisterType((*RegisterEnclaveKeyHeader)(nil), "ibc.lightclients.lcp.v1.RegisterEnclaveKeyHeader")
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.lcp.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.lcp.v1.ConsensusState")
}

func init() { proto.RegisterFile("ibc/lightclients/lcp/v1/lcp.proto", fileDescriptor_69f4c398e914fe8d) }

var fileDescriptor_69f4c398e914fe8d = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x4d, 0x1a, 0x7f, 0xe9, 0xd7, 0x4d, 0x5a, 0xc1, 0xaa, 0x0a, 0x26, 0x42, 0x6e, 0x1a, 0x09,
	0x29, 0x12, 0xc2, 0x26, 0x80, 0xb8, 0xd3, 0x28, 0x52, 0x23, 0x4e, 0xb8, 0xe5, 0xc2, 0xc5, 0xda,
	0xd8, 0x23, 0x67, 0x89, 0xed, 0x35, 0xbb, 0x93, 0x80, 0xff, 0x05, 0xbf, 0x89, 0x53, 0x8e, 0x3d,
	0x72, 0x42, 0x90, 0xfc, 0x11, 0xb4, 0xeb, 0x6d, 0x1b, 0x38, 0x79, 0xe6, 0xbd, 0xe7, 0x79, 0xb3,
	0x4f, 0xbb, 0xe4, 0x9c, 0xcf, 0xe3, 0x20, 0xe3, 0xe9, 0x02, 0xe3, 0x8c, 0x43, 0x81, 0x2a, 0xc8,
	0xe2, 0x32, 0x58, 0x8f, 0xf5, 0xc7, 0x2f, 0xa5, 0x40, 0x41, 0x1f, 0xf1, 0x79, 0xec, 0xef, 0x4b,
	0x7c, 0xcd, 0xad, 0xc7, 0xfd, 0xd3, 0x54, 0xa4, 0xc2, 0x68, 0x02, 0x5d, 0xd5, 0xf2, 0xfe, 0x99,
	0x9e, 0x18, 0x0b, 0x09, 0x41, 0x2d, 0xd7, 0xc3, 0xea, 0xaa, 0x16, 0x0c, 0x3f, 0x11, 0xfa, 0xa1,
	0x4c, 0x18, 0xc2, 0xc4, 0xa0, 0x97, 0xc0, 0x12, 0x90, 0xd4, 0x23, 0x24, 0x16, 0x79, 0xce, 0x31,
	0x87, 0x02, 0xdd, 0xe6, 0xa0, 0x39, 0xea, 0x86, 0x7b, 0x08, 0xed, 0x91, 0xb6, 0xe2, 0x69, 0x01,
	0xd2, 0x3d, 0x30, 0x9c, 0xed, 0xe8, 0x13, 0x72, 0xa4, 0x2b, 0x86, 0x2b, 0x09, 0x6e, 0xcb, 0x50,
	0xf7, 0xc0, 0x50, 0x11, 0x37, 0x84, 0x94, 0x2b, 0x04, 0x39, 0x2d, 0xe2, 0x8c, 0xad, 0xe1, 0x1d,
	0x54, 0xd6, 0xb1, 0x47, 0xda, 0x12, 0x4a, 0x21, 0x6b, 0xb7, 0xa3, 0xd0, 0x76, 0x7f, 0x4f, 0x3c,
	0xf8, 0x67, 0x22, 0x3d, 0x27, 0x5d, 0xdd, 0xf0, 0x22, 0x8d, 0x62, 0x90, 0x68, 0x2d, 0x3b, 0x16,
	0x9b, 0x80, 0xc4, 0xe1, 0xf7, 0x03, 0xd2, 0xa9, 0xcf, 0x76, 0x85, 0x0c, 0x81, 0x4e, 0xc9, 0x71,
	0xc6, 0x10, 0x14, 0x46, 0x0b, 0xd0, 0x31, 0x1a, 0xbf, 0xce, 0xcb, 0xbe, 0xaf, 0x83, 0xd5, 0x49,
	0xf9, 0x36, 0x9f, 0xf5, 0xd8, 0xbf, 0x34, 0x8a, 0x0b, 0x67, 0xf3, 0xf3, 0xac, 0x11, 0x76, 0xeb,
	0xdf, 0x6a, 0x4c, 0xef, 0x95, 0x4b, 0xa8, 0x4f, 0x71, 0xbb, 0xd7, 0x1d, 0x40, 0x9f, 0x92, 0x93,
	0x25, 0x54, 0x11, 0x7c, 0x2d, 0xb9, 0x64, 0xc8, 0x45, 0x61, 0x36, 0x73, 0xc2, 0xe3, 0x25, 0x54,
	0xd3, 0x3b, 0x90, 0x52, 0xe2, 0x2c, 0xa1, 0x52, 0xae, 0x33, 0x68, 0x8d, 0xba, 0xa1, 0xa9, 0xe9,
	0x33, 0xf2, 0x90, 0xa1, 0x36, 0x32, 0x92, 0x08, 0x79, 0x0e, 0xca, 0xfd, 0x6f, 0xd0, 0x1a, 0x39,
	0xe1, 0x83, 0x3d, 0xe2, 0x5a, 0xe3, 0xf4, 0x35, 0xe9, 0xb1, 0x2c, 0x13, 0x5f, 0x20, 0x89, 0x3e,
	0xaf, 0x04, 0x42, 0xa4, 0xd9, 0x95, 0x02, 0xe5, 0xb6, 0x07, 0xad, 0xd1, 0x51, 0x78, 0x6a, 0xd9,
	0xf7, 0x9a, 0xbc, 0xb2, 0x1c, 0x7d, 0x41, 0x6e, 0xf1, 0x88, 0x25, 0x6b, 0xae, 0x84, 0xac, 0x22,
	0x9e, 0x28, 0xf7, 0xd0, 0xfc, 0x43, 0x2d, 0xf7, 0xd6, 0x52, 0xb3, 0x44, 0x0d, 0x67, 0xe4, 0x64,
	0x22, 0x0a, 0x05, 0x85, 0x5a, 0xa9, 0x3a, 0xc6, 0xc7, 0xe4, 0x7f, 0xed, 0x05, 0x11, 0x4f, 0xec,
	0xfd, 0x38, 0x34, 0xfd, 0x2c, 0xd1, 0xd1, 0x98, 0xad, 0x91, 0xe5, 0xa5, 0x89, 0xc6, 0x09, 0xef,
	0x81, 0x8b, 0xeb, 0xcd, 0x6f, 0xaf, 0xb1, 0xd9, 0x7a, 0xcd, 0x9b, 0xad, 0xd7, 0xfc, 0xb5, 0xf5,
	0x9a, 0xdf, 0x76, 0x5e, 0xe3, 0x66, 0xe7, 0x35, 0x7e, 0xec, 0xbc, 0xc6, 0xc7, 0x37, 0x29, 0xc7,
	0xc5, 0x6a, 0xee, 0xc7, 0x22, 0x0f, 0x12, 0x86, 0x2c, 0x5e, 0x30, 0x5e, 0x64, 0x6c, 0x6e, 0x1e,
	0x42, 0x2a, 0xea, 0xc7, 0xf1, 0x7c, 0xff, 0x75, 0x60, 0x55, 0x82, 0x9a, 0xb7, 0xcd, 0x6d, 0x7e,
	0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0x08, 0x3a, 0xbd, 0x7f, 0x42, 0x03, 0x00, 0x00,
}

func (m *UpdateClientHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClientHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterEnclaveKeyHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterEnclaveKeyHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterEnclaveKeyHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigningCert) > 0 {
		i -= len(m.SigningCert)
		copy(dAtA[i:], m.SigningCert)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.SigningCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Report) > 0 {
		i -= len(m.Report)
		copy(dAtA[i:], m.Report)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Report)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedAdvisoryIds) > 0 {
		for iNdEx := len(m.AllowedAdvisoryIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAdvisoryIds[iNdEx])
			copy(dAtA[i:], m.AllowedAdvisoryIds[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.AllowedAdvisoryIds[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AllowedQuoteStatuses) > 0 {
		for iNdEx := len(m.AllowedQuoteStatuses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedQuoteStatuses[iNdEx])
			copy(dAtA[i:], m.AllowedQuoteStatuses[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.AllowedQuoteStatuses[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AttestationTimes) > 0 {
		dAtA2 := make([]byte, len(m.AttestationTimes)*10)
		var j1 int
		for _, num := range m.AttestationTimes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLcp(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintLcp(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.KeyExpiration != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.KeyExpiration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Mrenclave) > 0 {
		i -= len(m.Mrenclave)
		copy(dAtA[i:], m.Mrenclave)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.Mrenclave)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLcp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintLcp(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintLcp(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLcp(dAtA []byte, offset int, v uint64) int {
	offset -= sovLcp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateClientHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	return n
}

func (m *RegisterEnclaveKeyHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Report)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	l = len(m.SigningCert)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	return n
}

func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LatestHeight.Size()
	n += 1 + l + sovLcp(uint64(l))
	l = len(m.Mrenclave)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	if m.KeyExpiration != 0 {
		n += 1 + sovLcp(uint64(m.KeyExpiration))
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	if len(m.AttestationTimes) > 0 {
		l = 0
		for _, e := range m.AttestationTimes {
			l += sovLcp(uint64(e))
		}
		n += 1 + sovLcp(uint64(l)) + l
	}
	if len(m.AllowedQuoteStatuses) > 0 {
		for _, s := range m.AllowedQuoteStatuses {
			l = len(s)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	if len(m.AllowedAdvisoryIds) > 0 {
		for _, s := range m.AllowedAdvisoryIds {
			l = len(s)
			n += 1 + l + sovLcp(uint64(l))
		}
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovLcp(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovLcp(uint64(m.Timestamp))
	}
	return n
}

func sovLcp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLcp(x uint64) (n int) {
	return sovLcp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateClientHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterEnclaveKeyHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterEnclaveKeyHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterEnclaveKeyHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Report = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningCert = append(m.SigningCert[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningCert == nil {
				m.SigningCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrenclave", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrenclave = append(m.Mrenclave[:0], dAtA[iNdEx:postIndex]...)
			if m.Mrenclave == nil {
				m.Mrenclave = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExpiration", wireType)
			}
			m.KeyExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyExpiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLcp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AttestationTimes = append(m.AttestationTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLcp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLcp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLcp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AttestationTimes) == 0 {
					m.AttestationTimes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLcp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AttestationTimes = append(m.AttestationTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationTimes", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedQuoteStatuses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedQuoteStatuses = append(m.AllowedQuoteStatuses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAdvisoryIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAdvisoryIds = append(m.AllowedAdvisoryIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLcp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLcp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLcp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLcp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLcp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLcp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLcp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLcp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLcp = fmt.Errorf("proto: unexpected end of group")
)
